IP = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8,
      57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7]
IP_1 = [40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25]
Extension = [32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9,
             8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17,
             16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25,
             24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1]
S1 = [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
      [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
      [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
      [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
      ]
S2 = [[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
      [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
      [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
      [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
      ]
S3 = [[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
      [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
      [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
      [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]]
S4 = [[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
      [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
      [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
      [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]]
S5 = [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
      [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
      [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
      [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]]
S6 = [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
      [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
      [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
      [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]]
S7 = [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
      [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
      [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
      [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]]
S8 = [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
      [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
      [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
      [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]]
S = [S1, S2, S3, S4, S5, S6, S7, S8]
P = [16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10,
     2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]


def circular_left_shift(binary_num, shift_count):
    num_bits = 28
    # 将二进制数向左移动指定的位数，并将溢出的高位部分拼接到低位
    shifted_num = ((binary_num << shift_count) & ((1 << num_bits) - 1)) | (binary_num >> (num_bits - shift_count))
    return shifted_num


def replacement(s_in, replace, length):
    n = len(replace)
    s_out = 0
    for i in range(n):
        ii = replace[i]
        # Convert input to string before converting to integer
        tmp = (int(str(s_in), 16) >> (length - ii)) & 1
        s_out <<= 1
        s_out += tmp
    return s_out


def S_compress(r, S):
    hang = ((r & 0b100000) >> 4) + (r & 0b1)
    lie = ((r & 0b010000) + (r & 0b001000) + (r & 0b000100) + (r & 0b000010)) >> 1
    n = S[hang][lie]
    return n


def get_subkey(k):
    key_left = [0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]
    k_s1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,
            10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,
            63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,
            14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4]
    k_s2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10,
            23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2,
            41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48,
            44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]

    k = replacement(k, k_s1, 64)
    C = (k & 0xfffffff0000000) >> 28
    D = k & 0xfffffff

    sub_key = []
    # 产生子密钥
    for i in range(1, 17):
        C = circular_left_shift(C, key_left[i])
        D = circular_left_shift(D, key_left[i])
        sub = (C << 28) + D
        sub = replacement(sub, k_s2, 56)
        sub_key.append(sub)
    return sub_key


def DES(s, k, op):
    # s_1是IP置换后的明文
    s_1 = replacement(s, IP, 64)
    L = [0 for ii in range(20)]
    R = [0 for ii in range(20)]
    L[0] = (s_1 & 0xffffffff00000000) >> 32
    R[0] = s_1 & 0xffffffff

    sub_key = get_subkey(k)
    if op == 0:
        sub_key.reverse()

    for i in range(1, 17):
        L[i] = R[i - 1]
        # 将R_i-1扩展置换
        R[i - 1] = replacement(R[i - 1], Extension, 32)

        # 进行异或
        R[i - 1] = R[i - 1] ^ sub_key[i - 1]

        # S盒
        ans = 0
        for j in range(8):
            s_in = (R[i - 1] >> (j * 6)) & 0b111111
            s_out = S_compress(s_in, S[7 - j])
            s_out <<= (j * 4)
            ans += s_out
        R[i - 1] = ans

        # 置换运算P
        R[i - 1] = replacement(R[i - 1], P, 32)

        # 异或
        R[i] = R[i - 1] ^ L[i - 1]

    cipher = (R[16] << 32) + L[16]
    cipher = replacement(cipher, IP_1, 64)

    return hex(cipher)


def DES_3(s, k1, k2, op):
    s1 = DES(s, k1, op)
    s2 = DES(s1, k2, not op)
    s3 = DES(s2, k1, op)
    print(s3)


def main():
    s = input().strip()
    k1 = input().strip()
    k2 = input().strip()
    op = int(input())
    DES_3(s, k1, k2, op)


if __name__ == "__main__":
    main()
